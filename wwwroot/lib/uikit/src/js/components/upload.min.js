/**
 * Minified by jsDelivr using Terser v5.15.1.
 * Original file: /npm/uikit@3.16.12/src/js/components/upload.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import I18n from"../mixin/i18n";import{addClass,assign,matches,noop,on,removeClass,toArray,trigger}from"uikit-util";export default{mixins:[I18n],i18n:{invalidMime:"Invalid File Type: %s",invalidName:"Invalid File Name: %s",invalidSize:"Invalid File Size: %s Kilobytes Max"},props:{allow:String,clsDragover:String,concurrent:Number,maxSize:Number,method:String,mime:String,multiple:Boolean,name:String,params:Object,type:String,url:String},data:{allow:!1,clsDragover:"uk-dragover",concurrent:1,maxSize:0,method:"POST",mime:!1,multiple:!1,name:"files[]",params:{},type:"",url:"",abort:noop,beforeAll:noop,beforeSend:noop,complete:noop,completeAll:noop,error:noop,fail:noop,load:noop,loadEnd:noop,loadStart:noop,progress:noop},events:{change(e){matches(e.target,'input[type="file"]')&&(e.preventDefault(),e.target.files&&this.upload(e.target.files),e.target.value="")},drop(e){stop(e);const t=e.dataTransfer;t?.files&&(removeClass(this.$el,this.clsDragover),this.upload(t.files))},dragenter(e){stop(e)},dragover(e){stop(e),addClass(this.$el,this.clsDragover)},dragleave(e){stop(e),removeClass(this.$el,this.clsDragover)}},methods:{async upload(e){if(!(e=toArray(e)).length)return;trigger(this.$el,"upload",[e]);for(const t of e){if(this.maxSize&&1e3*this.maxSize<t.size)return void this.fail(this.t("invalidSize",this.maxSize));if(this.allow&&!match(this.allow,t.name))return void this.fail(this.t("invalidName",this.allow));if(this.mime&&!match(this.mime,t.type))return void this.fail(this.t("invalidMime",this.mime))}this.multiple||(e=e.slice(0,1)),this.beforeAll(this,e);const t=chunk(e,this.concurrent),o=async e=>{const r=new FormData;e.forEach((e=>r.append(this.name,e)));for(const e in this.params)r.append(e,this.params[e]);try{const e=await ajax(this.url,{data:r,method:this.method,responseType:this.type,beforeSend:e=>{const{xhr:t}=e;on(t.upload,"progress",this.progress);for(const e of["loadStart","load","loadEnd","abort"])on(t,e.toLowerCase(),this[e]);return this.beforeSend(e)}});this.complete(e),t.length?await o(t.shift()):this.completeAll(e)}catch(e){this.error(e)}};await o(t.shift())}}};function match(e,t){return t.match(new RegExp(`^${e.replace(/\//g,"\\/").replace(/\*\*/g,"(\\/[^\\/]+)*").replace(/\*/g,"[^\\/]+").replace(/((?!\\))\?/g,"$1.")}$`,"i"))}function chunk(e,t){const o=[];for(let r=0;r<e.length;r+=t)o.push(e.slice(r,r+t));return o}function stop(e){e.preventDefault(),e.stopPropagation()}export function ajax(e,t){const o={data:null,method:"GET",headers:{},xhr:new XMLHttpRequest,beforeSend:noop,responseType:"",...t};return Promise.resolve().then((()=>o.beforeSend(o))).then((()=>send(e,o)))}function send(e,t){return new Promise(((o,r)=>{const{xhr:s}=t;for(const e in t)if(e in s)try{s[e]=t[e]}catch(e){}s.open(t.method.toUpperCase(),e);for(const e in t.headers)s.setRequestHeader(e,t.headers[e]);on(s,"load",(()=>{0===s.status||s.status>=200&&s.status<300||304===s.status?o(s):r(assign(Error(s.statusText),{xhr:s,status:s.status}))})),on(s,"error",(()=>r(assign(Error("Network Error"),{xhr:s})))),on(s,"timeout",(()=>r(assign(Error("Network Timeout"),{xhr:s})))),s.send(t.data)}))}
//# sourceMappingURL=/sm/f273047a43c3b8124869c1ed00b2562bbc3a5c022fb7c5a8a27ac4ff0ea7c050.map