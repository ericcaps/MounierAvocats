/**
 * Minified by jsDelivr using Terser v5.15.1.
 * Original file: /npm/uikit@3.16.12/src/js/util/observer.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{on}from"./event";import{noop,toNodes}from"./lang";import{inBrowser}from"./env";export function observeIntersection(e,o,r={},{intersecting:n=!0}={}){const s=new IntersectionObserver(n?(e,r)=>{e.some((e=>e.isIntersecting))&&o(e,r)}:o,r);for(const o of toNodes(e))s.observe(o);return s}const hasResizeObserver=inBrowser&&window.ResizeObserver;export function observeResize(e,o,r={box:"border-box"}){return hasResizeObserver?observe(ResizeObserver,e,o,r):(initResizeListener(),listeners.add(o),{observe:noop,unobserve:noop,disconnect(){listeners.delete(o)}})}let listeners;function initResizeListener(){if(listeners)return;let e;listeners=new Set;const o=()=>{if(!e){e=!0,requestAnimationFrame((()=>e=!1));for(const e of listeners)e()}};on(window,"load resize",o),on(document,"loadedmetadata load",o,!0)}export function observeMutation(e,o,r){return observe(MutationObserver,e,o,r)}function observe(e,o,r,n){const s=new e(r);for(const e of toNodes(o))s.observe(e,n);return s}
//# sourceMappingURL=/sm/d04d73dc675bd2e90ce9f6a0e4d83ff0b2b47c477f8222ff799f25689c3ab058.map